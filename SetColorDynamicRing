/**
 * SET TOKEN RING COLOR MACRO
 * 
 * Sets the dynamic token ring color for all actors on the current scene.
 * Works with both linked and unlinked tokens.
 * 
 * Compatible with:
 * - Foundry VTT v12
 * - D&D 5e v4.4.3
 * 
 * Author: Edmund (with Claude's help)
 * Version: 1.1
 */

// =============================================================================
// CONFIGURATION
// =============================================================================

/**
 * Target hex color for token rings
 * Change this value to your desired color
 * Format: #RRGGBB (hex color code)
 */
const TARGET_COLOR = "#ff0000"; // Red - change this to your desired color

/**
 * Target hex color for token ring background
 * Change this value to your desired background color
 * Format: #RRGGBB (hex color code)
 */
const TARGET_BACKGROUND_COLOR = "#000000"; // Black - change this to your desired background color

// =============================================================================
// MAIN EXECUTION
// =============================================================================

(async () => {
    try {
        // Get the current scene
        const currentScene = canvas.scene;
        
        // Validate we have a scene
        if (!currentScene) {
            ui.notifications.error("No active scene found!");
            return;
        }
        
        console.log(`Processing token rings on scene: ${currentScene.name}`);
        
        // Get all tokens on the current scene
        const sceneTokens = currentScene.tokens;
        
        if (sceneTokens.size === 0) {
            ui.notifications.warn("No tokens found on the current scene.");
            return;
        }
        
        console.log(`Found ${sceneTokens.size} tokens on scene`);
        
        // Track successful updates for reporting
        let successCount = 0;
        let errorCount = 0;
        let skippedPCs = 0;
        let skippedExistingColors = 0;
        const errors = [];
        
        // Process each token on the scene
        for (const tokenDoc of sceneTokens) {
            try {
                // Log which token we're processing
                console.log(`Processing token: ${tokenDoc.name} (ID: ${tokenDoc.id})`);
                
                // Get the actor associated with this token
                const actor = tokenDoc.actor;
                
                // Skip if no actor is associated
                if (!actor) {
                    console.log(`⚠ Skipping ${tokenDoc.name}: No associated actor`);
                    continue;
                }
                
                // Check if this actor is a Player Character
                // In D&D 5e, PC actors have type "character"
                if (actor.type === "character") {
                    skippedPCs++;
                    console.log(`⏭ Skipping PC: ${tokenDoc.name} (Actor type: ${actor.type})`);
                    continue;
                }
                
                // Check if token already has ring colors set
                const currentRingColor = tokenDoc.ring?.colors?.ring;
                const currentBackgroundColor = tokenDoc.ring?.colors?.background;
                
                // Skip if either color is already set (not null/undefined/empty)
                if (currentRingColor || currentBackgroundColor) {
                    skippedExistingColors++;
                    console.log(`⏭ Skipping ${tokenDoc.name}: Already has ring colors set (Ring: ${currentRingColor || 'none'}, Background: ${currentBackgroundColor || 'none'})`);
                    continue;
                }
                
                console.log(`Processing NPC: ${tokenDoc.name} (Actor type: ${actor.type}) - No existing colors`);
                
                // Prepare the update data for the token's ring: enable it and set colors
                const updateData = {
                    "ring.enabled": true,
                    "ring.colors.ring": TARGET_COLOR,
                    "ring.colors.background": TARGET_BACKGROUND_COLOR
                };
                
                // Update the token document
                await tokenDoc.update(updateData);
                
                successCount++;
                console.log(`✓ Enabled ring and updated colors for: ${tokenDoc.name}`);
                
            } catch (tokenError) {
                errorCount++;
                const errorMsg = `Failed to update ${tokenDoc.name}: ${tokenError.message}`;
                errors.push(errorMsg);
                console.error(errorMsg);
            }
        }
        
        // Report results to user
        const totalTokens = sceneTokens.size;
        const eligibleTokens = totalTokens - skippedPCs;
        let notificationMsg = `Token ring update complete: ${successCount}/${eligibleTokens} NPCs updated`;
        
        if (skippedPCs > 0) {
            notificationMsg += ` (${skippedPCs} PCs skipped)`;
        }
        
        if (skippedExistingColors > 0) {
            notificationMsg += ` (${skippedExistingColors} with existing colors skipped)`;
        }
        
        if (errorCount > 0) {
            notificationMsg += `, ${errorCount} errors`;
            ui.notifications.warn(notificationMsg);
            
            // Log detailed error information
            console.warn("Errors encountered:");
            errors.forEach(error => console.warn(`  - ${error}`));
        } else {
            ui.notifications.info(notificationMsg);
        }
        
        console.log(`Macro execution complete. Ring color: ${TARGET_COLOR}, Background color: ${TARGET_BACKGROUND_COLOR}`);
        console.log(`Summary: ${successCount} NPCs updated, ${skippedPCs} PCs skipped, ${skippedExistingColors} with existing colors skipped, ${errorCount} errors`);
        
    } catch (mainError) {
        // Handle any unexpected errors in the main execution
        const errorMsg = `Macro execution failed: ${mainError.message}`;
        console.error(errorMsg);
        ui.notifications.error(errorMsg);
    }
})();

// =============================================================================
// USAGE NOTES
// =============================================================================

/**
 * HOW TO USE:
 * 1. Change the TARGET_COLOR constant to your desired hex color
 * 2. Make sure you're on the scene you want to modify
 * 3. Run the macro
 * 
 * SUPPORTED COLOR FORMATS:
 * - #ff0000 (red)
 * - #00ff00 (green)  
 * - #0000ff (blue)
 * - #ffffff (white)
 * - #000000 (black)
 * - Any valid 6-digit hex color
 * 
 * WHAT THIS MACRO DOES:
 * - Finds all tokens on the current scene
 * - Skips Player Character tokens (actor type "character")
 * - Skips NPC tokens that already have ring colors set
 * - Enables dynamic token rings for eligible NPC tokens
 * - Updates ring.colors.ring and ring.colors.background for tokens without existing colors
 * - Works with both linked and unlinked tokens
 * - Provides console logging and user notifications
 * - Continues processing even if individual tokens fail
 * 
 * WHAT THIS MACRO DOESN'T DO:
 * - Modify Player Character token rings
 * - Overwrite existing ring colors (preserves existing customizations)
 * - Modify other ring properties (thickness, etc.)
 * - Work across multiple scenes simultaneously
 */
